steps:
- name: gcr.io/k8s-skaffold/skaffold
  args:
    - skaffold
    - build
    - '--interactive=false'
    - '--file-output=/workspace/artifacts.json'
- name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: gcloud
  args:
    [
      "deploy", "releases", "create", "rel-${SHORT_SHA}",
      "--delivery-pipeline", "hello-cloudbuild-delivery-pipeline",
      "--region", "us-central1",
      "--annotations", "commitId=${REVISION_ID}",
      "--build-artifacts", "/workspace/artifacts.json"
    ]
# steps:
# # This step deploys the new version of our container image
# # in the hello-cloudbuild Kubernetes Engine cluster.
# # - name: 'gcr.io/cloud-builders/kubectl'
# #   id: Deploy
# #   args:
# #   - 'apply'
# #   - '-f'
# #   - 'kubernetes.yaml'
# #   env:
# #   - 'CLOUDSDK_COMPUTE_REGION=us-central1'
# #   - 'CLOUDSDK_CONTAINER_CLUSTER=hello-cloudbuild'

# - name: gcr.io/k8s-skaffold/skaffold
#   args:
#     - skaffold
#     - build
#     - '--interactive=false'
#     - '--file-output=~/artifacts.json'
#     - '--push=true'

# - name: gcr.io/google.com/cloudsdktool/cloud-sdk
#   entrypoint: gcloud
#   args:
#       [
#        "deploy", "releases", "create", "rel-${SHORT_SHA}",
#        "--delivery-pipeline", "hello-cloudbuild-delivery-pipeline",
#        "--region", "us-central1",
#        "--annotations", "commitId=${REVISION_ID}",
#        "--build-artifacts", "~/artifacts.json"
#       ]
# - name: gcr.io/google.com/cloudsdktool/cloud-sdk
#   entrypoint: gcloud
#   args:
#     [
#       "deploy", "releases", "create", "rel-${SHORT_SHA}",
#       "--delivery-pipeline", "hello-cloudbuild-delivery-pipeline",
#       "--region", "us-central1",
#       "--annotations", "commitId=${REVISION_ID}",
#       "--images", "us-central1-docker.pkg.dev/GOOGLE_CLOUD_PROJECT/my-repository/hello-cloudbuild:COMMIT_SHA"
#     ]
# This step copies the applied manifest to the production branch
# The COMMIT_SHA variable is automatically
# replaced by Cloud Build.
- name: 'gcr.io/cloud-builders/git'
  id: Copy to production branch
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    set -x && \
    # Configure Git to create commits with Cloud Build's service account
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)') && \
    # Switch to the production branch and copy the kubernetes.yaml file from the candidate branch
    git fetch origin production && git checkout production && \
    git checkout $COMMIT_SHA kubernetes.yaml && \
    # Commit the kubernetes.yaml file with a descriptive commit message
    git commit -m "Manifest from commit $COMMIT_SHA
    $(git log --format=%B -n 1 $COMMIT_SHA)" && \
    # Push the changes back to Cloud Source Repository
    git push origin production
# [END cloudbuild-delivery]
